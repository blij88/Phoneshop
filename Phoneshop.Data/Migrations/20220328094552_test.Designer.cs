// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phoneshop.Data.Data;

namespace Phoneshop.Data.Migrations
{
    [DbContext(typeof(PhoneshopContext))]
    [Migration("20220328094552_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Phoneshop.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 501, DateTimeKind.Local).AddTicks(6939),
                            Name = "string",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 501, DateTimeKind.Local).AddTicks(7352),
                            Name = "Xiaomi",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Phoneshop.Data.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Camera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,17)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Color = "blood",
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 494, DateTimeKind.Local).AddTicks(8816),
                            Deleted = false,
                            Description = "testing",
                            Discount = 0.0,
                            DiscountType = 0,
                            Price = 54m,
                            Type = "test1",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            Color = "blood",
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 498, DateTimeKind.Local).AddTicks(6438),
                            Deleted = false,
                            Description = "testing",
                            Discount = 0.0,
                            DiscountType = 0,
                            Price = 54m,
                            Type = "test2",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Color = "blood",
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 498, DateTimeKind.Local).AddTicks(6478),
                            Deleted = false,
                            Description = "testing",
                            Discount = 0.0,
                            DiscountType = 0,
                            Price = 54m,
                            Type = "test3",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Color = "blood",
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 498, DateTimeKind.Local).AddTicks(6485),
                            Deleted = false,
                            Description = "testing",
                            Discount = 0.0,
                            DiscountType = 0,
                            Price = 54m,
                            Type = "test4",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            Color = "blood",
                            CreateDateTime = new DateTime(2022, 3, 28, 11, 45, 51, 498, DateTimeKind.Local).AddTicks(6488),
                            Deleted = false,
                            Description = "testing",
                            Discount = 0.0,
                            DiscountType = 0,
                            Price = 54m,
                            Type = "test5",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Phoneshop.Data.Entities.Phone", b =>
                {
                    b.HasOne("Phoneshop.Data.Entities.Brand", "Brand")
                        .WithMany("Phones")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Phoneshop.Data.Entities.Brand", b =>
                {
                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
